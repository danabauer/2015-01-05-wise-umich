##SQL lessons for the instructor

** If you don't have Firefox installed, do it now **
** You will also need the Firefox SQL plugin **
** If you don't have wget or cURL installed for your shell, do it now **

Relational databases
--------------------

* Relational databases store data in tables and with fields (columns) and records (rows)
* Data in tables has types, just like in Python, and all values in a field have the same type

__A flood of data!__ 

  * Writing programs helps us wade through all the data
  * Sometimes, relational databases are necessary to efficiently get through the data
  * databases can help you
    * ask more complex questions
    * write faster code
    * run faster analyses

* Queries let us look up data or make calculations based on columns
* The queries are distinct from the data, so if we change the data we can just rerun the query

__Database managers__

* A database manager is a program that manipulates a database
* Commands or queries in a database manager are usually written in SQL
* rows and columns of a database table are not stored in any particular order
* Database design takes practice (but revist example of geek vs. non-geek problem solving)
  * Lots of literature on designing database schema - need good knowledge of data!
* Yes, you can eventually ask the same questions using your programming ninja skills, 
but it can get really complicated, take a long time to do, and be difficult to debug.
  * Step 1: Read a really really big file
  * Step 2: Select, find and filter the data we need from the file
  * Then do analyses
  *Databases: Step 1: data is already indexed, so move right to selecting and filtering data!!
  
__SQL__
* MySQL most popular database system for bioinformatics
* FREE!
* Many Genome browsers, Entrez, Ensembl, Gene Ontology use MySQL to run Web Portals
* Can update, modify tables, save queries (repetitive tasks)
* Combine database skillz with programming environments
  * Now you are omnipotent!

## Getting the data and using the command line tools

### Installation
**please install SQLite as mentioned in the setup instructions.**

Then, generate a directory "software_carpentry_sql" at your chosen location, where we can store the database:

1) Open a command line terminal window.
2) Type

mkdir ~/swc/sql

3) Change into that directory

cd ~/swc/sql

How to download the "gen-survey-database.sql" file from github

After changing into the "~/swc/sql" directory, from within the directory you will now 
download the SQL file "gen-survey-database.sql" located on github: 
https://github.com/swcarpentry/bc/blob/master/novice/sql/gen-survey-database.sql

Since this file is within a git repository, you will pull the single file locally without 
cloning the entire git repo. For this purpose, you can use either GNU Wget, 
a command-line web-crawler software that supports downloading via HTTP, HTTPS, and FTP protocols;
 or use cURL, a library and command-line tool for transferring data using various protocols. 
 Both these tools are cross-platform and are supported for various operating systems.

After installing Wget (or cURL) locally, run the following command on your terminal:

[Tip: If you prefer to use cURL, replace "wget" with "curl -O" in the following command.]

wget https://raw.githubusercontent.com/swcarpentry/bc/master/novice/sql/gen-survey-database.sql

With the above command, Wget generates an HTTP request to pull the single raw file
 "gen-survey-database.sql" from github into your current directory and upon successful
  completion, your terminal will display output.
  
Now that we have successfully pulled the single SQL file, lets generate the database "survey.db" and fill it according to the instructions with the data in "gen-survey-database.sql". To call the SQLite3 program, from the command line terminal, execute the following command:

sqlite3 survey.db < gen-survey-database.sql
Connecting and testing the SQLite DB installation

In order to connect to the created database, you need to start SQLite from within the folder where you have created the database. So, from within the "~/swc/sql" directory, type:

sqlite3 survey.db
The command "sqlite3 survey.db" opens the database itself and drops you into the database command line prompt. In SQLite a database is a flat file, which needs to be explicitly opened. SQLite is then started which is indicated by the change of the command line prompt to "sqlite", as shown in the following output:

/novice/sql$ sqlite3 survey.db 
SQLite version 3.7.15.2 2013-01-09 11:53:05
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite>  
Let us check the list the names and files of attached databases with the command ".databases", as shown in the following output:

sqlite> .databases
seq  name             file                                                      
---  ---------------  ----------------------------------------------------------
0    main             ~/novice/sql/survey.db 
You can check that the necessary tables "Person", "Survey", "Site" and "Visited" exist by typing:

.tables
and the output of ".tables" would look like this:

sqlite> .tables
Person   Site     Survey   Visited
Now, you are done with the setup and you can proceed to the next lesson. You can conduct the following exercises in the current command line SQLite session. Since the IPython magic methods (the first rows in each command starting with %) will only work in an IPython notebook, you can omit them while using SQLite3 in the terminal. If you prefer to use the ipython notebook, you can quit SQLite3.

How to exit the SQLite3 DB command line interface (CLI)

To exit SQLite3, type:

sqlite> .quit
